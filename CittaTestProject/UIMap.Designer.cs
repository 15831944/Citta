// ------------------------------------------------------------------------------
//  <auto-generated>
//      此代码由编码的 UI 测试生成器生成。
//      版本: 16.0.0.0
//
//      如果重新生成代码，则更改此文件可能会导致错误的行为，
//      并将丢失这些更改。
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CittaTestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public partial class UIMap
    {
        
        #region Properties
        public UI用户登录主窗体 UI用户登录主窗体
        {
            get
            {
                if ((this.mUI用户登录主窗体 == null))
                {
                    this.mUI用户登录主窗体 = new UI用户登录主窗体();
                }
                return this.mUI用户登录主窗体;
            }
        }
        
        public UICitta主界面 UICitta主界面
        {
            get
            {
                if ((this.mUICitta主界面 == null))
                {
                    this.mUICitta主界面 = new UICitta主界面();
                }
                return this.mUICitta主界面;
            }
        }
        
        public UI新建模型 UI新建模型
        {
            get
            {
                if ((this.mUI新建模型 == null))
                {
                    this.mUI新建模型 = new UI新建模型();
                }
                return this.mUI新建模型;
            }
        }
        
        public UI导入数据 UI导入数据
        {
            get
            {
                if ((this.mUI导入数据 == null))
                {
                    this.mUI导入数据 = new UI导入数据();
                }
                return this.mUI导入数据;
            }
        }
        
        public UI取最大值算子设置 UI取最大值算子设置
        {
            get
            {
                if ((this.mUI取最大值算子设置 == null))
                {
                    this.mUI取最大值算子设置 = new UI取最大值算子设置();
                }
                return this.mUI取最大值算子设置;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UI打开Window UI打开Window
        {
            get
            {
                if ((this.mUI打开Window == null))
                {
                    this.mUI打开Window = new UI打开Window();
                }
                return this.mUI打开Window;
            }
        }
        
        public UI运算完毕 UI运算完毕
        {
            get
            {
                if ((this.mUI运算完毕 == null))
                {
                    this.mUI运算完毕 = new UI运算完毕();
                }
                return this.mUI运算完毕;
            }
        }
        
        public UI已重置 UI已重置
        {
            get
            {
                if ((this.mUI已重置 == null))
                {
                    this.mUI已重置 = new UI已重置();
                }
                return this.mUI已重置;
            }
        }
        
        public UI开发调试Window UI开发调试Window
        {
            get
            {
                if ((this.mUI开发调试Window == null))
                {
                    this.mUI开发调试Window = new UI开发调试Window();
                }
                return this.mUI开发调试Window;
            }
        }
        #endregion
        
        #region Fields
        private UI用户登录主窗体 mUI用户登录主窗体;
        
        private UICitta主界面 mUICitta主界面;
        
        private UI新建模型 mUI新建模型;
        
        private UI导入数据 mUI导入数据;
        
        private UI取最大值算子设置 mUI取最大值算子设置;
        
        private UIItemWindow mUIItemWindow;
        
        private UI打开Window mUI打开Window;
        
        private UI运算完毕 mUI运算完毕;
        
        private UI已重置 mUI已重置;
        
        private UI开发调试Window mUI开发调试Window;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI用户登录主窗体 : WinWindow
    {
        
        public UI用户登录主窗体()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "用户登录";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("用户登录");
            #endregion
        }
        
        #region Properties
        public UI登录 UI登录
        {
            get
            {
                if ((this.mUI登录 == null))
                {
                    this.mUI登录 = new UI登录(this);
                }
                return this.mUI登录;
            }
        }
        
        public UI用户名 UI用户名
        {
            get
            {
                if ((this.mUI用户名 == null))
                {
                    this.mUI用户名 = new UI用户名(this);
                }
                return this.mUI用户名;
            }
        }
        #endregion
        
        #region Fields
        private UI登录 mUI登录;
        
        private UI用户名 mUI用户名;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI登录 : WinWindow
    {
        
        public UI登录(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "loginbutton";
            this.WindowTitles.Add("用户登录");
            #endregion
        }
        
        #region Properties
        public WinButton UI登录Button
        {
            get
            {
                if ((this.mUI登录Button == null))
                {
                    this.mUI登录Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI登录Button.SearchProperties[WinButton.PropertyNames.Name] = "登录";
                    this.mUI登录Button.WindowTitles.Add("用户登录");
                    #endregion
                }
                return this.mUI登录Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI登录Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI用户名 : WinWindow
    {
        
        public UI用户名(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "userNameComboBox";
            this.WindowTitles.Add("用户登录");
            #endregion
        }
        
        #region Properties
        public WinComboBox UI用户名ComboBox
        {
            get
            {
                if ((this.mUI用户名ComboBox == null))
                {
                    this.mUI用户名ComboBox = new WinComboBox(this);
                    #region 搜索条件
                    this.mUI用户名ComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "用户名";
                    this.mUI用户名ComboBox.WindowTitles.Add("用户登录");
                    #endregion
                }
                return this.mUI用户名ComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUI用户名ComboBox;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UICitta主界面 : WinWindow
    {
        
        public UICitta主界面()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "烽火FiberHome";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public UI新建 UI新建
        {
            get
            {
                if ((this.mUI新建 == null))
                {
                    this.mUI新建 = new UI新建(this);
                }
                return this.mUI新建;
            }
        }
        
        public UI导入 UI导入
        {
            get
            {
                if ((this.mUI导入 == null))
                {
                    this.mUI导入 = new UI导入(this);
                }
                return this.mUI导入;
            }
        }
        
        public UI全部保存 UI全部保存
        {
            get
            {
                if ((this.mUI全部保存 == null))
                {
                    this.mUI全部保存 = new UI全部保存(this);
                }
                return this.mUI全部保存;
            }
        }
        
        public UI关联算子 UI关联算子
        {
            get
            {
                if ((this.mUI关联算子 == null))
                {
                    this.mUI关联算子 = new UI关联算子(this);
                }
                return this.mUI关联算子;
            }
        }
        
        public UI碰撞算子 UI碰撞算子
        {
            get
            {
                if ((this.mUI碰撞算子 == null))
                {
                    this.mUI碰撞算子 = new UI碰撞算子(this);
                }
                return this.mUI碰撞算子;
            }
        }
        
        public UI取并集 UI取并集
        {
            get
            {
                if ((this.mUI取并集 == null))
                {
                    this.mUI取并集 = new UI取并集(this);
                }
                return this.mUI取并集;
            }
        }
        
        public UI条件筛选 UI条件筛选
        {
            get
            {
                if ((this.mUI条件筛选 == null))
                {
                    this.mUI条件筛选 = new UI条件筛选(this);
                }
                return this.mUI条件筛选;
            }
        }
        
        public UI取最大值 UI取最大值
        {
            get
            {
                if ((this.mUI取最大值 == null))
                {
                    this.mUI取最大值 = new UI取最大值(this);
                }
                return this.mUI取最大值;
            }
        }
        
        public UI取差集 UI取差集
        {
            get
            {
                if ((this.mUI取差集 == null))
                {
                    this.mUI取差集 = new UI取差集(this);
                }
                return this.mUI取差集;
            }
        }
        
        public UI随机采样 UI随机采样
        {
            get
            {
                if ((this.mUI随机采样 == null))
                {
                    this.mUI随机采样 = new UI随机采样(this);
                }
                return this.mUI随机采样;
            }
        }
        
        public UI取最小值 UI取最小值
        {
            get
            {
                if ((this.mUI取最小值 == null))
                {
                    this.mUI取最小值 = new UI取最小值(this);
                }
                return this.mUI取最小值;
            }
        }
        
        public UI取平均值 UI取平均值
        {
            get
            {
                if ((this.mUI取平均值 == null))
                {
                    this.mUI取平均值 = new UI取平均值(this);
                }
                return this.mUI取平均值;
            }
        }
        
        public UI频率算子 UI频率算子
        {
            get
            {
                if ((this.mUI频率算子 == null))
                {
                    this.mUI频率算子 = new UI频率算子(this);
                }
                return this.mUI频率算子;
            }
        }
        
        public UI排序算子 UI排序算子
        {
            get
            {
                if ((this.mUI排序算子 == null))
                {
                    this.mUI排序算子 = new UI排序算子(this);
                }
                return this.mUI排序算子;
            }
        }
        
        public UI分组算子 UI分组算子
        {
            get
            {
                if ((this.mUI分组算子 == null))
                {
                    this.mUI分组算子 = new UI分组算子(this);
                }
                return this.mUI分组算子;
            }
        }
        
        public UI关键词过滤 UI关键词过滤
        {
            get
            {
                if ((this.mUI关键词过滤 == null))
                {
                    this.mUI关键词过滤 = new UI关键词过滤(this);
                }
                return this.mUI关键词过滤;
            }
        }
        
        public UI数据标准化 UI数据标准化
        {
            get
            {
                if ((this.mUI数据标准化 == null))
                {
                    this.mUI数据标准化 = new UI数据标准化(this);
                }
                return this.mUI数据标准化;
            }
        }
        
        public UI左侧_我的模型 UI左侧_我的模型
        {
            get
            {
                if ((this.mUI左侧_我的模型 == null))
                {
                    this.mUI左侧_我的模型 = new UI左侧_我的模型(this);
                }
                return this.mUI左侧_我的模型;
            }
        }
        
        public UI左侧_数据 UI左侧_数据
        {
            get
            {
                if ((this.mUI左侧_数据 == null))
                {
                    this.mUI左侧_数据 = new UI左侧_数据(this);
                }
                return this.mUI左侧_数据;
            }
        }
        
        public UIIAO实验室 UIIAO实验室
        {
            get
            {
                if ((this.mUIIAO实验室 == null))
                {
                    this.mUIIAO实验室 = new UIIAO实验室(this);
                }
                return this.mUIIAO实验室;
            }
        }
        
        public UIAI实践算子 UIAI实践算子
        {
            get
            {
                if ((this.mUIAI实践算子 == null))
                {
                    this.mUIAI实践算子 = new UIAI实践算子(this);
                }
                return this.mUIAI实践算子;
            }
        }
        
        public UI多源算子 UI多源算子
        {
            get
            {
                if ((this.mUI多源算子 == null))
                {
                    this.mUI多源算子 = new UI多源算子(this);
                }
                return this.mUI多源算子;
            }
        }
        
        public UIPython算子 UIPython算子
        {
            get
            {
                if ((this.mUIPython算子 == null))
                {
                    this.mUIPython算子 = new UIPython算子(this);
                }
                return this.mUIPython算子;
            }
        }
        
        public UI浮动工具栏_缩小 UI浮动工具栏_缩小
        {
            get
            {
                if ((this.mUI浮动工具栏_缩小 == null))
                {
                    this.mUI浮动工具栏_缩小 = new UI浮动工具栏_缩小(this);
                }
                return this.mUI浮动工具栏_缩小;
            }
        }
        
        public UI浮动工具栏_拖动 UI浮动工具栏_拖动
        {
            get
            {
                if ((this.mUI浮动工具栏_拖动 == null))
                {
                    this.mUI浮动工具栏_拖动 = new UI浮动工具栏_拖动(this);
                }
                return this.mUI浮动工具栏_拖动;
            }
        }
        
        public UI浮动工具栏_放大 UI浮动工具栏_放大
        {
            get
            {
                if ((this.mUI浮动工具栏_放大 == null))
                {
                    this.mUI浮动工具栏_放大 = new UI浮动工具栏_放大(this);
                }
                return this.mUI浮动工具栏_放大;
            }
        }
        
        public UI浮动工具栏_备注 UI浮动工具栏_备注
        {
            get
            {
                if ((this.mUI浮动工具栏_备注 == null))
                {
                    this.mUI浮动工具栏_备注 = new UI浮动工具栏_备注(this);
                }
                return this.mUI浮动工具栏_备注;
            }
        }
        
        public UI浮动工具栏_框选 UI浮动工具栏_框选
        {
            get
            {
                if ((this.mUI浮动工具栏_框选 == null))
                {
                    this.mUI浮动工具栏_框选 = new UI浮动工具栏_框选(this);
                }
                return this.mUI浮动工具栏_框选;
            }
        }
        
        public UI一键排版 UI一键排版
        {
            get
            {
                if ((this.mUI一键排版 == null))
                {
                    this.mUI一键排版 = new UI一键排版(this);
                }
                return this.mUI一键排版;
            }
        }
        
        public UI首选项 UI首选项
        {
            get
            {
                if ((this.mUI首选项 == null))
                {
                    this.mUI首选项 = new UI首选项(this);
                }
                return this.mUI首选项;
            }
        }
        
        public UIMoveOpControl UIMoveOpControl
        {
            get
            {
                if ((this.mUIMoveOpControl == null))
                {
                    this.mUIMoveOpControl = new UIMoveOpControl(this);
                }
                return this.mUIMoveOpControl;
            }
        }
        
        public UICanvasPanel UICanvasPanel
        {
            get
            {
                if ((this.mUICanvasPanel == null))
                {
                    this.mUICanvasPanel = new UICanvasPanel(this);
                }
                return this.mUICanvasPanel;
            }
        }
        
        public UI数据预览 UI数据预览
        {
            get
            {
                if ((this.mUI数据预览 == null))
                {
                    this.mUI数据预览 = new UI数据预览(this);
                }
                return this.mUI数据预览;
            }
        }
        
        public UI运行日志 UI运行日志
        {
            get
            {
                if ((this.mUI运行日志 == null))
                {
                    this.mUI运行日志 = new UI运行日志(this);
                }
                return this.mUI运行日志;
            }
        }
        
        public UI控制台 UI控制台
        {
            get
            {
                if ((this.mUI控制台 == null))
                {
                    this.mUI控制台 = new UI控制台(this);
                }
                return this.mUI控制台;
            }
        }
        
        public UI隐藏底层面板 UI隐藏底层面板
        {
            get
            {
                if ((this.mUI隐藏底层面板 == null))
                {
                    this.mUI隐藏底层面板 = new UI隐藏底层面板(this);
                }
                return this.mUI隐藏底层面板;
            }
        }
        
        public UI撤销 UI撤销
        {
            get
            {
                if ((this.mUI撤销 == null))
                {
                    this.mUI撤销 = new UI撤销(this);
                }
                return this.mUI撤销;
            }
        }
        
        public UI恢复 UI恢复
        {
            get
            {
                if ((this.mUI恢复 == null))
                {
                    this.mUI恢复 = new UI恢复(this);
                }
                return this.mUI恢复;
            }
        }
        
        public UI导航窗 UI导航窗
        {
            get
            {
                if ((this.mUI导航窗 == null))
                {
                    this.mUI导航窗 = new UI导航窗(this);
                }
                return this.mUI导航窗;
            }
        }
        
        public UI保存 UI保存
        {
            get
            {
                if ((this.mUI保存 == null))
                {
                    this.mUI保存 = new UI保存(this);
                }
                return this.mUI保存;
            }
        }
        
        public UIMoveDtControl UIMoveDtControl
        {
            get
            {
                if ((this.mUIMoveDtControl == null))
                {
                    this.mUIMoveDtControl = new UIMoveDtControl(this);
                }
                return this.mUIMoveDtControl;
            }
        }
        
        public UI算子 UI算子
        {
            get
            {
                if ((this.mUI算子 == null))
                {
                    this.mUI算子 = new UI算子(this);
                }
                return this.mUI算子;
            }
        }
        
        public UI算子_设置 UI算子_设置
        {
            get
            {
                if ((this.mUI算子_设置 == null))
                {
                    this.mUI算子_设置 = new UI算子_设置(this);
                }
                return this.mUI算子_设置;
            }
        }
        
        public UI烽火FiberHomeTitleBar UI烽火FiberHomeTitleBar
        {
            get
            {
                if ((this.mUI烽火FiberHomeTitleBar == null))
                {
                    this.mUI烽火FiberHomeTitleBar = new UI烽火FiberHomeTitleBar(this);
                }
                return this.mUI烽火FiberHomeTitleBar;
            }
        }
        
        public UI我的模型栏 UI我的模型栏
        {
            get
            {
                if ((this.mUI我的模型栏 == null))
                {
                    this.mUI我的模型栏 = new UI我的模型栏(this);
                }
                return this.mUI我的模型栏;
            }
        }
        
        public UI本地数据栏 UI本地数据栏
        {
            get
            {
                if ((this.mUI本地数据栏 == null))
                {
                    this.mUI本地数据栏 = new UI本地数据栏(this);
                }
                return this.mUI本地数据栏;
            }
        }
        
        public UI工具 UI工具
        {
            get
            {
                if ((this.mUI工具 == null))
                {
                    this.mUI工具 = new UI工具(this);
                }
                return this.mUI工具;
            }
        }
        
        public UI隐藏 UI隐藏
        {
            get
            {
                if ((this.mUI隐藏 == null))
                {
                    this.mUI隐藏 = new UI隐藏(this);
                }
                return this.mUI隐藏;
            }
        }
        
        public UI运行 UI运行
        {
            get
            {
                if ((this.mUI运行 == null))
                {
                    this.mUI运行 = new UI运行(this);
                }
                return this.mUI运行;
            }
        }
        
        public UI终止 UI终止
        {
            get
            {
                if ((this.mUI终止 == null))
                {
                    this.mUI终止 = new UI终止(this);
                }
                return this.mUI终止;
            }
        }
        
        public UI重置 UI重置
        {
            get
            {
                if ((this.mUI重置 == null))
                {
                    this.mUI重置 = new UI重置(this);
                }
                return this.mUI重置;
            }
        }
        
        public UI数据Window UI数据Window
        {
            get
            {
                if ((this.mUI数据Window == null))
                {
                    this.mUI数据Window = new UI数据Window(this);
                }
                return this.mUI数据Window;
            }
        }
        #endregion
        
        #region Fields
        private UI新建 mUI新建;
        
        private UI导入 mUI导入;
        
        private UI全部保存 mUI全部保存;
        
        private UI关联算子 mUI关联算子;
        
        private UI碰撞算子 mUI碰撞算子;
        
        private UI取并集 mUI取并集;
        
        private UI条件筛选 mUI条件筛选;
        
        private UI取最大值 mUI取最大值;
        
        private UI取差集 mUI取差集;
        
        private UI随机采样 mUI随机采样;
        
        private UI取最小值 mUI取最小值;
        
        private UI取平均值 mUI取平均值;
        
        private UI频率算子 mUI频率算子;
        
        private UI排序算子 mUI排序算子;
        
        private UI分组算子 mUI分组算子;
        
        private UI关键词过滤 mUI关键词过滤;
        
        private UI数据标准化 mUI数据标准化;
        
        private UI左侧_我的模型 mUI左侧_我的模型;
        
        private UI左侧_数据 mUI左侧_数据;
        
        private UIIAO实验室 mUIIAO实验室;
        
        private UIAI实践算子 mUIAI实践算子;
        
        private UI多源算子 mUI多源算子;
        
        private UIPython算子 mUIPython算子;
        
        private UI浮动工具栏_缩小 mUI浮动工具栏_缩小;
        
        private UI浮动工具栏_拖动 mUI浮动工具栏_拖动;
        
        private UI浮动工具栏_放大 mUI浮动工具栏_放大;
        
        private UI浮动工具栏_备注 mUI浮动工具栏_备注;
        
        private UI浮动工具栏_框选 mUI浮动工具栏_框选;
        
        private UI一键排版 mUI一键排版;
        
        private UI首选项 mUI首选项;
        
        private UIMoveOpControl mUIMoveOpControl;
        
        private UICanvasPanel mUICanvasPanel;
        
        private UI数据预览 mUI数据预览;
        
        private UI运行日志 mUI运行日志;
        
        private UI控制台 mUI控制台;
        
        private UI隐藏底层面板 mUI隐藏底层面板;
        
        private UI撤销 mUI撤销;
        
        private UI恢复 mUI恢复;
        
        private UI导航窗 mUI导航窗;
        
        private UI保存 mUI保存;
        
        private UIMoveDtControl mUIMoveDtControl;
        
        private UI算子 mUI算子;
        
        private UI算子_设置 mUI算子_设置;
        
        private UI烽火FiberHomeTitleBar mUI烽火FiberHomeTitleBar;
        
        private UI我的模型栏 mUI我的模型栏;
        
        private UI本地数据栏 mUI本地数据栏;
        
        private UI工具 mUI工具;
        
        private UI隐藏 mUI隐藏;
        
        private UI运行 mUI运行;
        
        private UI终止 mUI终止;
        
        private UI重置 mUI重置;
        
        private UI数据Window mUI数据Window;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI新建 : WinWindow
    {
        
        public UI新建(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "newModelButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI新建Button
        {
            get
            {
                if ((this.mUI新建Button == null))
                {
                    this.mUI新建Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI新建Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI新建Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI新建Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI导入 : WinWindow
    {
        
        public UI导入(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ImportButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI导入Button
        {
            get
            {
                if ((this.mUI导入Button == null))
                {
                    this.mUI导入Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI导入Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI导入Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI导入Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI全部保存 : WinWindow
    {
        
        public UI全部保存(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "saveAllButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI全部保存Button
        {
            get
            {
                if ((this.mUI全部保存Button == null))
                {
                    this.mUI全部保存Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI全部保存Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI全部保存Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI全部保存Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI关联算子 : WinWindow
    {
        
        public UI关联算子(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpRelate";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI关联算子Button
        {
            get
            {
                if ((this.mUI关联算子Button == null))
                {
                    this.mUI关联算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI关联算子Button.SearchProperties[WinButton.PropertyNames.Name] = "关联算子";
                    this.mUI关联算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI关联算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI关联算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI碰撞算子 : WinWindow
    {
        
        public UI碰撞算子(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpCollide";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI碰撞算子Button
        {
            get
            {
                if ((this.mUI碰撞算子Button == null))
                {
                    this.mUI碰撞算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI碰撞算子Button.SearchProperties[WinButton.PropertyNames.Name] = "碰撞算子";
                    this.mUI碰撞算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI碰撞算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI碰撞算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取并集 : WinWindow
    {
        
        public UI取并集(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lefPanelOpUnion";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI取并集Button
        {
            get
            {
                if ((this.mUI取并集Button == null))
                {
                    this.mUI取并集Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取并集Button.SearchProperties[WinButton.PropertyNames.Name] = "取并集";
                    this.mUI取并集Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI取并集Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取并集Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI条件筛选 : WinWindow
    {
        
        public UI条件筛选(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpFilter";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI条件筛选Button
        {
            get
            {
                if ((this.mUI条件筛选Button == null))
                {
                    this.mUI条件筛选Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI条件筛选Button.SearchProperties[WinButton.PropertyNames.Name] = "条件筛选";
                    this.mUI条件筛选Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI条件筛选Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI条件筛选Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取最大值 : WinWindow
    {
        
        public UI取最大值(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpMax";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI取最大值Button
        {
            get
            {
                if ((this.mUI取最大值Button == null))
                {
                    this.mUI取最大值Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取最大值Button.SearchProperties[WinButton.PropertyNames.Name] = "取最大值";
                    this.mUI取最大值Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI取最大值Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取最大值Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取差集 : WinWindow
    {
        
        public UI取差集(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpDiffer";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI取差集Button
        {
            get
            {
                if ((this.mUI取差集Button == null))
                {
                    this.mUI取差集Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取差集Button.SearchProperties[WinButton.PropertyNames.Name] = "取差集";
                    this.mUI取差集Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI取差集Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取差集Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI随机采样 : WinWindow
    {
        
        public UI随机采样(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpRandom";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI随机采样Button
        {
            get
            {
                if ((this.mUI随机采样Button == null))
                {
                    this.mUI随机采样Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI随机采样Button.SearchProperties[WinButton.PropertyNames.Name] = "随机采样";
                    this.mUI随机采样Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI随机采样Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI随机采样Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取最小值 : WinWindow
    {
        
        public UI取最小值(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpMin";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI取最小值Button
        {
            get
            {
                if ((this.mUI取最小值Button == null))
                {
                    this.mUI取最小值Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取最小值Button.SearchProperties[WinButton.PropertyNames.Name] = "取最小值";
                    this.mUI取最小值Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI取最小值Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取最小值Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取平均值 : WinWindow
    {
        
        public UI取平均值(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpAvg";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI取平均值Button
        {
            get
            {
                if ((this.mUI取平均值Button == null))
                {
                    this.mUI取平均值Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取平均值Button.SearchProperties[WinButton.PropertyNames.Name] = "取平均值";
                    this.mUI取平均值Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI取平均值Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取平均值Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI频率算子 : WinWindow
    {
        
        public UI频率算子(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpFreq";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI频率算子Button
        {
            get
            {
                if ((this.mUI频率算子Button == null))
                {
                    this.mUI频率算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI频率算子Button.SearchProperties[WinButton.PropertyNames.Name] = "频率算子";
                    this.mUI频率算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI频率算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI频率算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI排序算子 : WinWindow
    {
        
        public UI排序算子(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpSort";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI排序算子Button
        {
            get
            {
                if ((this.mUI排序算子Button == null))
                {
                    this.mUI排序算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI排序算子Button.SearchProperties[WinButton.PropertyNames.Name] = "排序算子";
                    this.mUI排序算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI排序算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI排序算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI分组算子 : WinWindow
    {
        
        public UI分组算子(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpGroup";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI分组算子Button
        {
            get
            {
                if ((this.mUI分组算子Button == null))
                {
                    this.mUI分组算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI分组算子Button.SearchProperties[WinButton.PropertyNames.Name] = "分组算子";
                    this.mUI分组算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI分组算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI分组算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI关键词过滤 : WinWindow
    {
        
        public UI关键词过滤(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpWordFilter";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI关键词过滤Button
        {
            get
            {
                if ((this.mUI关键词过滤Button == null))
                {
                    this.mUI关键词过滤Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI关键词过滤Button.SearchProperties[WinButton.PropertyNames.Name] = "关键词过滤";
                    this.mUI关键词过滤Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI关键词过滤Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI关键词过滤Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI数据标准化 : WinWindow
    {
        
        public UI数据标准化(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpDataStandar";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI数据标准化Button
        {
            get
            {
                if ((this.mUI数据标准化Button == null))
                {
                    this.mUI数据标准化Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI数据标准化Button.SearchProperties[WinButton.PropertyNames.Name] = "数据标准化";
                    this.mUI数据标准化Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI数据标准化Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI数据标准化Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI左侧_我的模型 : WinWindow
    {
        
        public UI左侧_我的模型(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "myModelButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI我的模型LeftButton
        {
            get
            {
                if ((this.mUI我的模型LeftButton == null))
                {
                    this.mUI我的模型LeftButton = new WinButton(this);
                    #region 搜索条件
                    this.mUI我的模型LeftButton.SearchProperties[WinButton.PropertyNames.Name] = "我的模型";
                    this.mUI我的模型LeftButton.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI我的模型LeftButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI我的模型LeftButton;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI左侧_数据 : WinWindow
    {
        
        public UI左侧_数据(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dataButton";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI数据LeftButton
        {
            get
            {
                if ((this.mUI数据LeftButton == null))
                {
                    this.mUI数据LeftButton = new WinButton(this);
                    #region 搜索条件
                    this.mUI数据LeftButton.SearchProperties[WinButton.PropertyNames.Name] = "数据";
                    this.mUI数据LeftButton.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI数据LeftButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI数据LeftButton;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIIAO实验室 : WinWindow
    {
        
        public UIIAO实验室(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "flowChartButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UIIAO实验室LeftButton
        {
            get
            {
                if ((this.mUIIAO实验室LeftButton == null))
                {
                    this.mUIIAO实验室LeftButton = new WinButton(this);
                    #region 搜索条件
                    this.mUIIAO实验室LeftButton.SearchProperties[WinButton.PropertyNames.Name] = "IAO实验室";
                    this.mUIIAO实验室LeftButton.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIIAO实验室LeftButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIAO实验室LeftButton;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIAI实践算子 : WinWindow
    {
        
        public UIAI实践算子(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "customOPButton1";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UIAI实践Button
        {
            get
            {
                if ((this.mUIAI实践Button == null))
                {
                    this.mUIAI实践Button = new WinButton(this);
                    #region 搜索条件
                    this.mUIAI实践Button.SearchProperties[WinButton.PropertyNames.Name] = "AI实践";
                    this.mUIAI实践Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIAI实践Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAI实践Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI多源算子 : WinWindow
    {
        
        public UI多源算子(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "customOPButton2";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI多源算子Button
        {
            get
            {
                if ((this.mUI多源算子Button == null))
                {
                    this.mUI多源算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI多源算子Button.SearchProperties[WinButton.PropertyNames.Name] = "多源算子";
                    this.mUI多源算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI多源算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI多源算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIPython算子 : WinWindow
    {
        
        public UIPython算子(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pythonOPButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UIPython算子Button
        {
            get
            {
                if ((this.mUIPython算子Button == null))
                {
                    this.mUIPython算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUIPython算子Button.SearchProperties[WinButton.PropertyNames.Name] = "Python算子";
                    this.mUIPython算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIPython算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPython算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI浮动工具栏_缩小 : WinWindow
    {
        
        public UI浮动工具栏_缩小(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "zoomDownPictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI缩小Client
        {
            get
            {
                if ((this.mUI缩小Client == null))
                {
                    this.mUI缩小Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI缩小Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI缩小Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI缩小Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI浮动工具栏_拖动 : WinWindow
    {
        
        public UI浮动工具栏_拖动(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "movePictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI拖动Client
        {
            get
            {
                if ((this.mUI拖动Client == null))
                {
                    this.mUI拖动Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI拖动Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI拖动Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI拖动Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI浮动工具栏_放大 : WinWindow
    {
        
        public UI浮动工具栏_放大(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "zoomUpPictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI放大Client
        {
            get
            {
                if ((this.mUI放大Client == null))
                {
                    this.mUI放大Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI放大Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI放大Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI放大Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI浮动工具栏_备注 : WinWindow
    {
        
        public UI浮动工具栏_备注(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "remarkPictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI备注Client
        {
            get
            {
                if ((this.mUI备注Client == null))
                {
                    this.mUI备注Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI备注Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI备注Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI备注Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI浮动工具栏_框选 : WinWindow
    {
        
        public UI浮动工具栏_框选(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "framePictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI框选Client
        {
            get
            {
                if ((this.mUI框选Client == null))
                {
                    this.mUI框选Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI框选Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI框选Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI框选Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI一键排版 : WinWindow
    {
        
        public UI一键排版(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formatButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI一键排版Button
        {
            get
            {
                if ((this.mUI一键排版Button == null))
                {
                    this.mUI一键排版Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI一键排版Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI一键排版Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI一键排版Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI首选项 : WinWindow
    {
        
        public UI首选项(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "moreButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI首选项Button
        {
            get
            {
                if ((this.mUI首选项Button == null))
                {
                    this.mUI首选项Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI首选项Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI首选项Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI首选项Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIMoveOpControl : WinWindow
    {
        
        public UIMoveOpControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MoveOpControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UIMoveOpControlClient
        {
            get
            {
                if ((this.mUIMoveOpControlClient == null))
                {
                    this.mUIMoveOpControlClient = new WinClient(this);
                    #region 搜索条件
                    this.mUIMoveOpControlClient.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIMoveOpControlClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIMoveOpControlClient;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UICanvasPanel : WinWindow
    {
        
        public UICanvasPanel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "canvasPanel";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinWindow UIMoveRsControlWindow
        {
            get
            {
                if ((this.mUIMoveRsControlWindow == null))
                {
                    this.mUIMoveRsControlWindow = new WinWindow(this);
                    #region 搜索条件
                    this.mUIMoveRsControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIMoveRsControlWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "58";
                    this.mUIMoveRsControlWindow.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIMoveRsControlWindow;
            }
        }
        
        public WinClient UICanvasPanelClient
        {
            get
            {
                if ((this.mUICanvasPanelClient == null))
                {
                    this.mUICanvasPanelClient = new WinClient(this);
                    #region 搜索条件
                    this.mUICanvasPanelClient.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUICanvasPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIMoveRsControlWindow;
        
        private WinClient mUICanvasPanelClient;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI数据预览 : WinWindow
    {
        
        public UI数据预览(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "previewLabel";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinText UI数据预览Text
        {
            get
            {
                if ((this.mUI数据预览Text == null))
                {
                    this.mUI数据预览Text = new WinText(this);
                    #region 搜索条件
                    this.mUI数据预览Text.SearchProperties[WinText.PropertyNames.Name] = "数据预览";
                    this.mUI数据预览Text.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI数据预览Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUI数据预览Text;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI运行日志 : WinWindow
    {
        
        public UI运行日志(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "logLabel";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinText UI运行日志Text
        {
            get
            {
                if ((this.mUI运行日志Text == null))
                {
                    this.mUI运行日志Text = new WinText(this);
                    #region 搜索条件
                    this.mUI运行日志Text.SearchProperties[WinText.PropertyNames.Name] = "运行日志";
                    this.mUI运行日志Text.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI运行日志Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUI运行日志Text;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI控制台 : WinWindow
    {
        
        public UI控制台(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pyControlLabel";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinText UI控制台Text
        {
            get
            {
                if ((this.mUI控制台Text == null))
                {
                    this.mUI控制台Text = new WinText(this);
                    #region 搜索条件
                    this.mUI控制台Text.SearchProperties[WinText.PropertyNames.Name] = "控制台";
                    this.mUI控制台Text.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI控制台Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUI控制台Text;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI隐藏底层面板 : WinWindow
    {
        
        public UI隐藏底层面板(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "minMaxPictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI隐藏底层面板Client
        {
            get
            {
                if ((this.mUI隐藏底层面板Client == null))
                {
                    this.mUI隐藏底层面板Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI隐藏底层面板Client.SearchProperties[WinControl.PropertyNames.Name] = "运行日志";
                    this.mUI隐藏底层面板Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI隐藏底层面板Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI隐藏底层面板Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI撤销 : WinWindow
    {
        
        public UI撤销(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "undoButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI撤销Button
        {
            get
            {
                if ((this.mUI撤销Button == null))
                {
                    this.mUI撤销Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI撤销Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI撤销Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI撤销Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI恢复 : WinWindow
    {
        
        public UI恢复(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "redoButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI恢复Button
        {
            get
            {
                if ((this.mUI恢复Button == null))
                {
                    this.mUI恢复Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI恢复Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI恢复Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI恢复Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI导航窗 : WinWindow
    {
        
        public UI导航窗(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "naviViewControl";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI导航窗Client
        {
            get
            {
                if ((this.mUI导航窗Client == null))
                {
                    this.mUI导航窗Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI导航窗Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI导航窗Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI导航窗Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI保存 : WinWindow
    {
        
        public UI保存(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "saveModelButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI保存Button
        {
            get
            {
                if ((this.mUI保存Button == null))
                {
                    this.mUI保存Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI保存Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI保存Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI保存Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIMoveDtControl : WinWindow
    {
        
        public UIMoveDtControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MoveDtControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UIMoveDtControlClient
        {
            get
            {
                if ((this.mUIMoveDtControlClient == null))
                {
                    this.mUIMoveDtControlClient = new WinClient(this);
                    #region 搜索条件
                    this.mUIMoveDtControlClient.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIMoveDtControlClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIMoveDtControlClient;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI算子 : WinWindow
    {
        
        public UI算子(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "oprateButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI算子Button
        {
            get
            {
                if ((this.mUI算子Button == null))
                {
                    this.mUI算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI算子Button.SearchProperties[WinButton.PropertyNames.Name] = "算子";
                    this.mUI算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI算子_设置 : WinWindow
    {
        
        public UI算子_设置(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "statusBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI设置Client
        {
            get
            {
                if ((this.mUI设置Client == null))
                {
                    this.mUI设置Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI设置Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI设置Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI设置Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI烽火FiberHomeTitleBar : WinTitleBar
    {
        
        public UI烽火FiberHomeTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI关闭Button
        {
            get
            {
                if ((this.mUI关闭Button == null))
                {
                    this.mUI关闭Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI关闭Button.SearchProperties[WinButton.PropertyNames.Name] = "关闭";
                    this.mUI关闭Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI关闭Button;
            }
        }
        
        public WinButton UI最小化Button
        {
            get
            {
                if ((this.mUI最小化Button == null))
                {
                    this.mUI最小化Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI最小化Button.SearchProperties[WinButton.PropertyNames.Name] = "最小化";
                    this.mUI最小化Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI最小化Button;
            }
        }
        
        public WinButton UI还原Button
        {
            get
            {
                if ((this.mUI还原Button == null))
                {
                    this.mUI还原Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI还原Button.SearchProperties[WinButton.PropertyNames.Name] = "还原";
                    this.mUI还原Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI还原Button;
            }
        }
        
        public WinButton UI最大化Button
        {
            get
            {
                if ((this.mUI最大化Button == null))
                {
                    this.mUI最大化Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI最大化Button.SearchProperties[WinButton.PropertyNames.Name] = "最大化";
                    this.mUI最大化Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI最大化Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI关闭Button;
        
        private WinButton mUI最小化Button;
        
        private WinButton mUI还原Button;
        
        private WinButton mUI最大化Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI我的模型栏 : WinWindow
    {
        
        public UI我的模型栏(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "myModelControl";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI我的模型栏Client
        {
            get
            {
                if ((this.mUI我的模型栏Client == null))
                {
                    this.mUI我的模型栏Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI我的模型栏Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI我的模型栏Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI我的模型栏Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI本地数据栏 : WinWindow
    {
        
        public UI本地数据栏(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "localFrame";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI本地数据Client
        {
            get
            {
                if ((this.mUI本地数据Client == null))
                {
                    this.mUI本地数据Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI本地数据Client.SearchProperties[WinControl.PropertyNames.Name] = "外部数据";
                    this.mUI本地数据Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI本地数据Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI本地数据Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI工具 : WinWindow
    {
        
        public UI工具(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rightShowButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI工具Client
        {
            get
            {
                if ((this.mUI工具Client == null))
                {
                    this.mUI工具Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI工具Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI工具Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI工具Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI隐藏 : WinWindow
    {
        
        public UI隐藏(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rightHideButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI隐藏Client
        {
            get
            {
                if ((this.mUI隐藏Client == null))
                {
                    this.mUI隐藏Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI隐藏Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI隐藏Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI隐藏Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI运行 : WinWindow
    {
        
        public UI运行(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "runButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI运行Button
        {
            get
            {
                if ((this.mUI运行Button == null))
                {
                    this.mUI运行Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI运行Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI运行Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI运行Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI终止 : WinWindow
    {
        
        public UI终止(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "stopButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI终止Button
        {
            get
            {
                if ((this.mUI终止Button == null))
                {
                    this.mUI终止Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI终止Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI终止Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI终止Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI重置 : WinWindow
    {
        
        public UI重置(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "resetButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI重置Button
        {
            get
            {
                if ((this.mUI重置Button == null))
                {
                    this.mUI重置Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI重置Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI重置Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI重置Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI数据Window : WinWindow
    {
        
        public UI数据Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dataButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI数据Button
        {
            get
            {
                if ((this.mUI数据Button == null))
                {
                    this.mUI数据Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI数据Button.SearchProperties[WinButton.PropertyNames.Name] = "数据";
                    this.mUI数据Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI数据Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI数据Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI新建模型 : WinWindow
    {
        
        public UI新建模型()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "新建模型";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("新建模型");
            #endregion
        }
        
        #region Properties
        public UI添加 UI添加
        {
            get
            {
                if ((this.mUI添加 == null))
                {
                    this.mUI添加 = new UI添加(this);
                }
                return this.mUI添加;
            }
        }
        #endregion
        
        #region Fields
        private UI添加 mUI添加;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI添加 : WinWindow
    {
        
        public UI添加(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "AddButton";
            this.WindowTitles.Add("新建模型");
            #endregion
        }
        
        #region Properties
        public WinButton UI添加Button
        {
            get
            {
                if ((this.mUI添加Button == null))
                {
                    this.mUI添加Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI添加Button.SearchProperties[WinButton.PropertyNames.Name] = "添加";
                    this.mUI添加Button.WindowTitles.Add("新建模型");
                    #endregion
                }
                return this.mUI添加Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI添加Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI导入数据 : WinWindow
    {
        
        public UI导入数据()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "导入数据";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("导入数据");
            #endregion
        }
        
        #region Properties
        public UI浏览 UI浏览
        {
            get
            {
                if ((this.mUI浏览 == null))
                {
                    this.mUI浏览 = new UI浏览(this);
                }
                return this.mUI浏览;
            }
        }
        
        public UIUTF8 UIUTF8
        {
            get
            {
                if ((this.mUIUTF8 == null))
                {
                    this.mUIUTF8 = new UIUTF8(this);
                }
                return this.mUIUTF8;
            }
        }
        
        public UI添加1 UI添加
        {
            get
            {
                if ((this.mUI添加 == null))
                {
                    this.mUI添加 = new UI添加1(this);
                }
                return this.mUI添加;
            }
        }
        
        public UIGBKWindow UIGBKWindow
        {
            get
            {
                if ((this.mUIGBKWindow == null))
                {
                    this.mUIGBKWindow = new UIGBKWindow(this);
                }
                return this.mUIGBKWindow;
            }
        }
        
        public UI取消Window UI取消Window
        {
            get
            {
                if ((this.mUI取消Window == null))
                {
                    this.mUI取消Window = new UI取消Window(this);
                }
                return this.mUI取消Window;
            }
        }
        #endregion
        
        #region Fields
        private UI浏览 mUI浏览;
        
        private UIUTF8 mUIUTF8;
        
        private UI添加1 mUI添加;
        
        private UIGBKWindow mUIGBKWindow;
        
        private UI取消Window mUI取消Window;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI浏览 : WinWindow
    {
        
        public UI浏览(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "previewButton";
            this.WindowTitles.Add("导入数据");
            #endregion
        }
        
        #region Properties
        public WinButton UI浏览Button
        {
            get
            {
                if ((this.mUI浏览Button == null))
                {
                    this.mUI浏览Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI浏览Button.SearchProperties[WinButton.PropertyNames.Name] = "浏览";
                    this.mUI浏览Button.WindowTitles.Add("导入数据");
                    #endregion
                }
                return this.mUI浏览Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI浏览Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIUTF8 : WinWindow
    {
        
        public UIUTF8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "utf8Lable";
            this.WindowTitles.Add("导入数据");
            #endregion
        }
        
        #region Properties
        public WinText UIUTF8Text
        {
            get
            {
                if ((this.mUIUTF8Text == null))
                {
                    this.mUIUTF8Text = new WinText(this);
                    #region 搜索条件
                    this.mUIUTF8Text.SearchProperties[WinText.PropertyNames.Name] = "UTF-8";
                    this.mUIUTF8Text.WindowTitles.Add("导入数据");
                    #endregion
                }
                return this.mUIUTF8Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIUTF8Text;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI添加1 : WinWindow
    {
        
        public UI添加1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "addButton";
            this.WindowTitles.Add("导入数据");
            #endregion
        }
        
        #region Properties
        public WinButton UI添加Button
        {
            get
            {
                if ((this.mUI添加Button == null))
                {
                    this.mUI添加Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI添加Button.SearchProperties[WinButton.PropertyNames.Name] = "添加";
                    this.mUI添加Button.WindowTitles.Add("导入数据");
                    #endregion
                }
                return this.mUI添加Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI添加Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIGBKWindow : WinWindow
    {
        
        public UIGBKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "gbkLable";
            this.WindowTitles.Add("导入数据");
            #endregion
        }
        
        #region Properties
        public WinText UIGBKText
        {
            get
            {
                if ((this.mUIGBKText == null))
                {
                    this.mUIGBKText = new WinText(this);
                    #region 搜索条件
                    this.mUIGBKText.SearchProperties[WinText.PropertyNames.Name] = "GBK";
                    this.mUIGBKText.WindowTitles.Add("导入数据");
                    #endregion
                }
                return this.mUIGBKText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIGBKText;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取消Window : WinWindow
    {
        
        public UI取消Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cancelButton";
            this.WindowTitles.Add("导入数据");
            #endregion
        }
        
        #region Properties
        public WinButton UI取消Button
        {
            get
            {
                if ((this.mUI取消Button == null))
                {
                    this.mUI取消Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取消Button.SearchProperties[WinButton.PropertyNames.Name] = "取消";
                    this.mUI取消Button.WindowTitles.Add("导入数据");
                    #endregion
                }
                return this.mUI取消Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取消Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取最大值算子设置 : WinWindow
    {
        
        public UI取最大值算子设置()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "取最大值算子设置";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("取最大值算子设置");
            #endregion
        }
        
        #region Properties
        public UI取最大值1 UI取最大值
        {
            get
            {
                if ((this.mUI取最大值 == null))
                {
                    this.mUI取最大值 = new UI取最大值1(this);
                }
                return this.mUI取最大值;
            }
        }
        
        public UI输出字段 UI输出字段
        {
            get
            {
                if ((this.mUI输出字段 == null))
                {
                    this.mUI输出字段 = new UI输出字段(this);
                }
                return this.mUI输出字段;
            }
        }
        
        public UI确认Window UI确认Window
        {
            get
            {
                if ((this.mUI确认Window == null))
                {
                    this.mUI确认Window = new UI确认Window(this);
                }
                return this.mUI确认Window;
            }
        }
        
        public UI数据信息 UI数据信息
        {
            get
            {
                if ((this.mUI数据信息 == null))
                {
                    this.mUI数据信息 = new UI数据信息(this);
                }
                return this.mUI数据信息;
            }
        }
        
        public UI取消 UI取消
        {
            get
            {
                if ((this.mUI取消 == null))
                {
                    this.mUI取消 = new UI取消(this);
                }
                return this.mUI取消;
            }
        }
        #endregion
        
        #region Fields
        private UI取最大值1 mUI取最大值;
        
        private UI输出字段 mUI输出字段;
        
        private UI确认Window mUI确认Window;
        
        private UI数据信息 mUI数据信息;
        
        private UI取消 mUI取消;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取最大值1 : WinWindow
    {
        
        public UI取最大值1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBox0";
            this.WindowTitles.Add("取最大值算子设置");
            #endregion
        }
        
        #region Properties
        public WinComboBox UI取最大值ComboBox
        {
            get
            {
                if ((this.mUI取最大值ComboBox == null))
                {
                    this.mUI取最大值ComboBox = new WinComboBox(this);
                    #region 搜索条件
                    this.mUI取最大值ComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "数据信息：";
                    this.mUI取最大值ComboBox.WindowTitles.Add("取最大值算子设置");
                    #endregion
                }
                return this.mUI取最大值ComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUI取最大值ComboBox;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI输出字段 : WinWindow
    {
        
        public UI输出字段(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "outListCCBL0";
            this.WindowTitles.Add("取最大值算子设置");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region 搜索条件
                    this.mUIItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIItemWindow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItemWindow.WindowTitles.Add("取最大值算子设置");
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI确认Window : WinWindow
    {
        
        public UI确认Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "confirmButton";
            this.WindowTitles.Add("取最大值算子设置");
            #endregion
        }
        
        #region Properties
        public WinButton UI确认Button
        {
            get
            {
                if ((this.mUI确认Button == null))
                {
                    this.mUI确认Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI确认Button.SearchProperties[WinButton.PropertyNames.Name] = "确认";
                    this.mUI确认Button.WindowTitles.Add("取最大值算子设置");
                    #endregion
                }
                return this.mUI确认Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI确认Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI数据信息 : WinWindow
    {
        
        public UI数据信息(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dataSourceTB0";
            this.WindowTitles.Add("取最大值算子设置");
            #endregion
        }
        
        #region Properties
        public WinEdit UI数据信息Edit
        {
            get
            {
                if ((this.mUI数据信息Edit == null))
                {
                    this.mUI数据信息Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUI数据信息Edit.WindowTitles.Add("取最大值算子设置");
                    #endregion
                }
                return this.mUI数据信息Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI数据信息Edit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取消 : WinWindow
    {
        
        public UI取消(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cancelButton";
            this.WindowTitles.Add("取最大值算子设置");
            #endregion
        }
        
        #region Properties
        public WinButton UI取消Button
        {
            get
            {
                if ((this.mUI取消Button == null))
                {
                    this.mUI取消Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取消Button.SearchProperties[WinButton.PropertyNames.Name] = "取消";
                    this.mUI取消Button.WindowTitles.Add("取最大值算子设置");
                    #endregion
                }
                return this.mUI取消Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取消Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "桌面 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.LISTBOX", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new UIItemList(this);
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIItemList : WinList
    {
        
        public UIItemList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinCheckBox UI姓名CheckBox
        {
            get
            {
                if ((this.mUI姓名CheckBox == null))
                {
                    this.mUI姓名CheckBox = new WinCheckBox(this);
                    #region 搜索条件
                    this.mUI姓名CheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "姓名";
                    #endregion
                }
                return this.mUI姓名CheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUI姓名CheckBox;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI打开Window : WinWindow
    {
        
        public UI打开Window()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "打开";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("打开");
            #endregion
        }
        
        #region Properties
        public UI打开TitleBar UI打开TitleBar
        {
            get
            {
                if ((this.mUI打开TitleBar == null))
                {
                    this.mUI打开TitleBar = new UI打开TitleBar(this);
                }
                return this.mUI打开TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UI打开TitleBar mUI打开TitleBar;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI打开TitleBar : WinTitleBar
    {
        
        public UI打开TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.WindowTitles.Add("打开");
            #endregion
        }
        
        #region Properties
        public WinButton UI关闭Button
        {
            get
            {
                if ((this.mUI关闭Button == null))
                {
                    this.mUI关闭Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI关闭Button.SearchProperties[WinButton.PropertyNames.Name] = "关闭";
                    this.mUI关闭Button.WindowTitles.Add("打开");
                    #endregion
                }
                return this.mUI关闭Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI关闭Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI运算完毕 : WinWindow
    {
        
        public UI运算完毕()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "运算完毕";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("运算完毕");
            #endregion
        }
        
        #region Properties
        public UI运算完毕TitleBar UI运算完毕TitleBar
        {
            get
            {
                if ((this.mUI运算完毕TitleBar == null))
                {
                    this.mUI运算完毕TitleBar = new UI运算完毕TitleBar(this);
                }
                return this.mUI运算完毕TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UI运算完毕TitleBar mUI运算完毕TitleBar;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI运算完毕TitleBar : WinTitleBar
    {
        
        public UI运算完毕TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.WindowTitles.Add("运算完毕");
            #endregion
        }
        
        #region Properties
        public WinButton UI关闭Button
        {
            get
            {
                if ((this.mUI关闭Button == null))
                {
                    this.mUI关闭Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI关闭Button.SearchProperties[WinButton.PropertyNames.Name] = "关闭";
                    this.mUI关闭Button.WindowTitles.Add("运算完毕");
                    #endregion
                }
                return this.mUI关闭Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI关闭Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI已重置 : WinWindow
    {
        
        public UI已重置()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "已重置";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("已重置");
            #endregion
        }
        
        #region Properties
        public UI已重置TitleBar UI已重置TitleBar
        {
            get
            {
                if ((this.mUI已重置TitleBar == null))
                {
                    this.mUI已重置TitleBar = new UI已重置TitleBar(this);
                }
                return this.mUI已重置TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UI已重置TitleBar mUI已重置TitleBar;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI已重置TitleBar : WinTitleBar
    {
        
        public UI已重置TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.WindowTitles.Add("已重置");
            #endregion
        }
        
        #region Properties
        public WinButton UI关闭Button
        {
            get
            {
                if ((this.mUI关闭Button == null))
                {
                    this.mUI关闭Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI关闭Button.SearchProperties[WinButton.PropertyNames.Name] = "关闭";
                    this.mUI关闭Button.WindowTitles.Add("已重置");
                    #endregion
                }
                return this.mUI关闭Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI关闭Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI开发调试Window : WinWindow
    {
        
        public UI开发调试Window()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "开发调试";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("开发调试");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "项目视图";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("开发调试");
            #endregion
        }
        
        #region Properties
        public UICitta_T1exeListItem UICitta_T1exeListItem
        {
            get
            {
                if ((this.mUICitta_T1exeListItem == null))
                {
                    this.mUICitta_T1exeListItem = new UICitta_T1exeListItem(this);
                }
                return this.mUICitta_T1exeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UICitta_T1exeListItem mUICitta_T1exeListItem;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UICitta_T1exeListItem : WinListItem
    {
        
        public UICitta_T1exeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Citta_T1.exe";
            this.WindowTitles.Add("开发调试");
            #endregion
        }
        
        #region Properties
        public WinEdit UI大小Edit
        {
            get
            {
                if ((this.mUI大小Edit == null))
                {
                    this.mUI大小Edit = new WinEdit(this);
                    #region 搜索条件
                    this.mUI大小Edit.SearchProperties[WinEdit.PropertyNames.Name] = "大小";
                    this.mUI大小Edit.WindowTitles.Add("开发调试");
                    #endregion
                }
                return this.mUI大小Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI大小Edit;
        #endregion
    }
}
