// ------------------------------------------------------------------------------
//  <auto-generated>
//      此代码由编码的 UI 测试生成器生成。
//      版本: 16.0.0.0
//
//      如果重新生成代码，则更改此文件可能会导致错误的行为，
//      并将丢失这些更改。
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CittaTestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public partial class UIMap
    {
        
        #region Properties
        public UI用户登录Window UI用户登录Window
        {
            get
            {
                if ((this.mUI用户登录Window == null))
                {
                    this.mUI用户登录Window = new UI用户登录Window();
                }
                return this.mUI用户登录Window;
            }
        }
        
        public UI烽火FiberHomeWindow UI烽火FiberHomeWindow
        {
            get
            {
                if ((this.mUI烽火FiberHomeWindow == null))
                {
                    this.mUI烽火FiberHomeWindow = new UI烽火FiberHomeWindow();
                }
                return this.mUI烽火FiberHomeWindow;
            }
        }
        #endregion
        
        #region Fields
        private UI用户登录Window mUI用户登录Window;
        
        private UI烽火FiberHomeWindow mUI烽火FiberHomeWindow;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI用户登录Window : WinWindow
    {
        
        public UI用户登录Window()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "用户登录";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("用户登录");
            #endregion
        }
        
        #region Properties
        public UI登录Window UI登录Window
        {
            get
            {
                if ((this.mUI登录Window == null))
                {
                    this.mUI登录Window = new UI登录Window(this);
                }
                return this.mUI登录Window;
            }
        }
        
        public UIUserNameComboBoxWindow UIUserNameComboBoxWindow
        {
            get
            {
                if ((this.mUIUserNameComboBoxWindow == null))
                {
                    this.mUIUserNameComboBoxWindow = new UIUserNameComboBoxWindow(this);
                }
                return this.mUIUserNameComboBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private UI登录Window mUI登录Window;
        
        private UIUserNameComboBoxWindow mUIUserNameComboBoxWindow;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI登录Window : WinWindow
    {
        
        public UI登录Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "loginbutton";
            this.WindowTitles.Add("用户登录");
            #endregion
        }
        
        #region Properties
        public WinButton UI登录Button
        {
            get
            {
                if ((this.mUI登录Button == null))
                {
                    this.mUI登录Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI登录Button.SearchProperties[WinButton.PropertyNames.Name] = "登录";
                    this.mUI登录Button.WindowTitles.Add("用户登录");
                    #endregion
                }
                return this.mUI登录Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI登录Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIUserNameComboBoxWindow : WinWindow
    {
        
        public UIUserNameComboBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "userNameComboBox";
            this.WindowTitles.Add("用户登录");
            #endregion
        }
        
        #region Properties
        public WinComboBox UI用户名ComboBox
        {
            get
            {
                if ((this.mUI用户名ComboBox == null))
                {
                    this.mUI用户名ComboBox = new WinComboBox(this);
                    #region 搜索条件
                    this.mUI用户名ComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "用户名";
                    this.mUI用户名ComboBox.WindowTitles.Add("用户登录");
                    #endregion
                }
                return this.mUI用户名ComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUI用户名ComboBox;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI烽火FiberHomeWindow : WinWindow
    {
        
        public UI烽火FiberHomeWindow()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "烽火FiberHome";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public UINewModelButtonWindow UINewModelButtonWindow
        {
            get
            {
                if ((this.mUINewModelButtonWindow == null))
                {
                    this.mUINewModelButtonWindow = new UINewModelButtonWindow(this);
                }
                return this.mUINewModelButtonWindow;
            }
        }
        
        public UIImportButtonWindow UIImportButtonWindow
        {
            get
            {
                if ((this.mUIImportButtonWindow == null))
                {
                    this.mUIImportButtonWindow = new UIImportButtonWindow(this);
                }
                return this.mUIImportButtonWindow;
            }
        }
        
        public UISaveAllButtonWindow UISaveAllButtonWindow
        {
            get
            {
                if ((this.mUISaveAllButtonWindow == null))
                {
                    this.mUISaveAllButtonWindow = new UISaveAllButtonWindow(this);
                }
                return this.mUISaveAllButtonWindow;
            }
        }
        
        public UI关联算子Window UI关联算子Window
        {
            get
            {
                if ((this.mUI关联算子Window == null))
                {
                    this.mUI关联算子Window = new UI关联算子Window(this);
                }
                return this.mUI关联算子Window;
            }
        }
        
        public UI碰撞算子Window UI碰撞算子Window
        {
            get
            {
                if ((this.mUI碰撞算子Window == null))
                {
                    this.mUI碰撞算子Window = new UI碰撞算子Window(this);
                }
                return this.mUI碰撞算子Window;
            }
        }
        
        public UI取并集Window UI取并集Window
        {
            get
            {
                if ((this.mUI取并集Window == null))
                {
                    this.mUI取并集Window = new UI取并集Window(this);
                }
                return this.mUI取并集Window;
            }
        }
        
        public UI条件筛选Window UI条件筛选Window
        {
            get
            {
                if ((this.mUI条件筛选Window == null))
                {
                    this.mUI条件筛选Window = new UI条件筛选Window(this);
                }
                return this.mUI条件筛选Window;
            }
        }
        
        public UI取最大值Window UI取最大值Window
        {
            get
            {
                if ((this.mUI取最大值Window == null))
                {
                    this.mUI取最大值Window = new UI取最大值Window(this);
                }
                return this.mUI取最大值Window;
            }
        }
        
        public UI取差集Window UI取差集Window
        {
            get
            {
                if ((this.mUI取差集Window == null))
                {
                    this.mUI取差集Window = new UI取差集Window(this);
                }
                return this.mUI取差集Window;
            }
        }
        
        public UI随机采样Window UI随机采样Window
        {
            get
            {
                if ((this.mUI随机采样Window == null))
                {
                    this.mUI随机采样Window = new UI随机采样Window(this);
                }
                return this.mUI随机采样Window;
            }
        }
        
        public UI取最小值Window UI取最小值Window
        {
            get
            {
                if ((this.mUI取最小值Window == null))
                {
                    this.mUI取最小值Window = new UI取最小值Window(this);
                }
                return this.mUI取最小值Window;
            }
        }
        
        public UI取平均值Window UI取平均值Window
        {
            get
            {
                if ((this.mUI取平均值Window == null))
                {
                    this.mUI取平均值Window = new UI取平均值Window(this);
                }
                return this.mUI取平均值Window;
            }
        }
        
        public UI频率算子Window UI频率算子Window
        {
            get
            {
                if ((this.mUI频率算子Window == null))
                {
                    this.mUI频率算子Window = new UI频率算子Window(this);
                }
                return this.mUI频率算子Window;
            }
        }
        
        public UI排序算子Window UI排序算子Window
        {
            get
            {
                if ((this.mUI排序算子Window == null))
                {
                    this.mUI排序算子Window = new UI排序算子Window(this);
                }
                return this.mUI排序算子Window;
            }
        }
        
        public UI分组算子Window UI分组算子Window
        {
            get
            {
                if ((this.mUI分组算子Window == null))
                {
                    this.mUI分组算子Window = new UI分组算子Window(this);
                }
                return this.mUI分组算子Window;
            }
        }
        
        public UI关键词过滤Window UI关键词过滤Window
        {
            get
            {
                if ((this.mUI关键词过滤Window == null))
                {
                    this.mUI关键词过滤Window = new UI关键词过滤Window(this);
                }
                return this.mUI关键词过滤Window;
            }
        }
        
        public UI数据标准化Window UI数据标准化Window
        {
            get
            {
                if ((this.mUI数据标准化Window == null))
                {
                    this.mUI数据标准化Window = new UI数据标准化Window(this);
                }
                return this.mUI数据标准化Window;
            }
        }
        
        public UI我的模型Window UI我的模型Window
        {
            get
            {
                if ((this.mUI我的模型Window == null))
                {
                    this.mUI我的模型Window = new UI我的模型Window(this);
                }
                return this.mUI我的模型Window;
            }
        }
        
        public UI数据Window UI数据Window
        {
            get
            {
                if ((this.mUI数据Window == null))
                {
                    this.mUI数据Window = new UI数据Window(this);
                }
                return this.mUI数据Window;
            }
        }
        
        public UIIAO实验室Window UIIAO实验室Window
        {
            get
            {
                if ((this.mUIIAO实验室Window == null))
                {
                    this.mUIIAO实验室Window = new UIIAO实验室Window(this);
                }
                return this.mUIIAO实验室Window;
            }
        }
        
        public UIAI实践Window UIAI实践Window
        {
            get
            {
                if ((this.mUIAI实践Window == null))
                {
                    this.mUIAI实践Window = new UIAI实践Window(this);
                }
                return this.mUIAI实践Window;
            }
        }
        
        public UI多源算子Window UI多源算子Window
        {
            get
            {
                if ((this.mUI多源算子Window == null))
                {
                    this.mUI多源算子Window = new UI多源算子Window(this);
                }
                return this.mUI多源算子Window;
            }
        }
        
        public UIPython算子Window UIPython算子Window
        {
            get
            {
                if ((this.mUIPython算子Window == null))
                {
                    this.mUIPython算子Window = new UIPython算子Window(this);
                }
                return this.mUIPython算子Window;
            }
        }
        
        public UIZoomDownPictureBoxWindow UIZoomDownPictureBoxWindow
        {
            get
            {
                if ((this.mUIZoomDownPictureBoxWindow == null))
                {
                    this.mUIZoomDownPictureBoxWindow = new UIZoomDownPictureBoxWindow(this);
                }
                return this.mUIZoomDownPictureBoxWindow;
            }
        }
        
        public UIMovePictureBoxWindow UIMovePictureBoxWindow
        {
            get
            {
                if ((this.mUIMovePictureBoxWindow == null))
                {
                    this.mUIMovePictureBoxWindow = new UIMovePictureBoxWindow(this);
                }
                return this.mUIMovePictureBoxWindow;
            }
        }
        
        public UIZoomUpPictureBoxWindow UIZoomUpPictureBoxWindow
        {
            get
            {
                if ((this.mUIZoomUpPictureBoxWindow == null))
                {
                    this.mUIZoomUpPictureBoxWindow = new UIZoomUpPictureBoxWindow(this);
                }
                return this.mUIZoomUpPictureBoxWindow;
            }
        }
        
        public UIRemarkPictureBoxWindow UIRemarkPictureBoxWindow
        {
            get
            {
                if ((this.mUIRemarkPictureBoxWindow == null))
                {
                    this.mUIRemarkPictureBoxWindow = new UIRemarkPictureBoxWindow(this);
                }
                return this.mUIRemarkPictureBoxWindow;
            }
        }
        
        public UIFramePictureBoxWindow UIFramePictureBoxWindow
        {
            get
            {
                if ((this.mUIFramePictureBoxWindow == null))
                {
                    this.mUIFramePictureBoxWindow = new UIFramePictureBoxWindow(this);
                }
                return this.mUIFramePictureBoxWindow;
            }
        }
        
        public UIFormatButtonWindow UIFormatButtonWindow
        {
            get
            {
                if ((this.mUIFormatButtonWindow == null))
                {
                    this.mUIFormatButtonWindow = new UIFormatButtonWindow(this);
                }
                return this.mUIFormatButtonWindow;
            }
        }
        
        public UIMoreButtonWindow UIMoreButtonWindow
        {
            get
            {
                if ((this.mUIMoreButtonWindow == null))
                {
                    this.mUIMoreButtonWindow = new UIMoreButtonWindow(this);
                }
                return this.mUIMoreButtonWindow;
            }
        }
        
        public UIMoveOpControlWindow UIMoveOpControlWindow
        {
            get
            {
                if ((this.mUIMoveOpControlWindow == null))
                {
                    this.mUIMoveOpControlWindow = new UIMoveOpControlWindow(this);
                }
                return this.mUIMoveOpControlWindow;
            }
        }
        
        public UICanvasPanelWindow UICanvasPanelWindow
        {
            get
            {
                if ((this.mUICanvasPanelWindow == null))
                {
                    this.mUICanvasPanelWindow = new UICanvasPanelWindow(this);
                }
                return this.mUICanvasPanelWindow;
            }
        }
        
        public UI数据预览Window UI数据预览Window
        {
            get
            {
                if ((this.mUI数据预览Window == null))
                {
                    this.mUI数据预览Window = new UI数据预览Window(this);
                }
                return this.mUI数据预览Window;
            }
        }
        
        public UI运行日志Window UI运行日志Window
        {
            get
            {
                if ((this.mUI运行日志Window == null))
                {
                    this.mUI运行日志Window = new UI运行日志Window(this);
                }
                return this.mUI运行日志Window;
            }
        }
        
        public UI控制台Window UI控制台Window
        {
            get
            {
                if ((this.mUI控制台Window == null))
                {
                    this.mUI控制台Window = new UI控制台Window(this);
                }
                return this.mUI控制台Window;
            }
        }
        
        public UIMinMaxPictureBoxWindow UIMinMaxPictureBoxWindow
        {
            get
            {
                if ((this.mUIMinMaxPictureBoxWindow == null))
                {
                    this.mUIMinMaxPictureBoxWindow = new UIMinMaxPictureBoxWindow(this);
                }
                return this.mUIMinMaxPictureBoxWindow;
            }
        }
        
        public UIUndoButtonWindow UIUndoButtonWindow
        {
            get
            {
                if ((this.mUIUndoButtonWindow == null))
                {
                    this.mUIUndoButtonWindow = new UIUndoButtonWindow(this);
                }
                return this.mUIUndoButtonWindow;
            }
        }
        
        public UIRedoButtonWindow UIRedoButtonWindow
        {
            get
            {
                if ((this.mUIRedoButtonWindow == null))
                {
                    this.mUIRedoButtonWindow = new UIRedoButtonWindow(this);
                }
                return this.mUIRedoButtonWindow;
            }
        }
        
        public UINaviViewControlWindow UINaviViewControlWindow
        {
            get
            {
                if ((this.mUINaviViewControlWindow == null))
                {
                    this.mUINaviViewControlWindow = new UINaviViewControlWindow(this);
                }
                return this.mUINaviViewControlWindow;
            }
        }
        
        public UISaveModelButtonWindow UISaveModelButtonWindow
        {
            get
            {
                if ((this.mUISaveModelButtonWindow == null))
                {
                    this.mUISaveModelButtonWindow = new UISaveModelButtonWindow(this);
                }
                return this.mUISaveModelButtonWindow;
            }
        }
        
        public UIMoveDtControlWindow UIMoveDtControlWindow
        {
            get
            {
                if ((this.mUIMoveDtControlWindow == null))
                {
                    this.mUIMoveDtControlWindow = new UIMoveDtControlWindow(this);
                }
                return this.mUIMoveDtControlWindow;
            }
        }
        
        public UIModelTitleControlWindow UIModelTitleControlWindow
        {
            get
            {
                if ((this.mUIModelTitleControlWindow == null))
                {
                    this.mUIModelTitleControlWindow = new UIModelTitleControlWindow(this);
                }
                return this.mUIModelTitleControlWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINewModelButtonWindow mUINewModelButtonWindow;
        
        private UIImportButtonWindow mUIImportButtonWindow;
        
        private UISaveAllButtonWindow mUISaveAllButtonWindow;
        
        private UI关联算子Window mUI关联算子Window;
        
        private UI碰撞算子Window mUI碰撞算子Window;
        
        private UI取并集Window mUI取并集Window;
        
        private UI条件筛选Window mUI条件筛选Window;
        
        private UI取最大值Window mUI取最大值Window;
        
        private UI取差集Window mUI取差集Window;
        
        private UI随机采样Window mUI随机采样Window;
        
        private UI取最小值Window mUI取最小值Window;
        
        private UI取平均值Window mUI取平均值Window;
        
        private UI频率算子Window mUI频率算子Window;
        
        private UI排序算子Window mUI排序算子Window;
        
        private UI分组算子Window mUI分组算子Window;
        
        private UI关键词过滤Window mUI关键词过滤Window;
        
        private UI数据标准化Window mUI数据标准化Window;
        
        private UI我的模型Window mUI我的模型Window;
        
        private UI数据Window mUI数据Window;
        
        private UIIAO实验室Window mUIIAO实验室Window;
        
        private UIAI实践Window mUIAI实践Window;
        
        private UI多源算子Window mUI多源算子Window;
        
        private UIPython算子Window mUIPython算子Window;
        
        private UIZoomDownPictureBoxWindow mUIZoomDownPictureBoxWindow;
        
        private UIMovePictureBoxWindow mUIMovePictureBoxWindow;
        
        private UIZoomUpPictureBoxWindow mUIZoomUpPictureBoxWindow;
        
        private UIRemarkPictureBoxWindow mUIRemarkPictureBoxWindow;
        
        private UIFramePictureBoxWindow mUIFramePictureBoxWindow;
        
        private UIFormatButtonWindow mUIFormatButtonWindow;
        
        private UIMoreButtonWindow mUIMoreButtonWindow;
        
        private UIMoveOpControlWindow mUIMoveOpControlWindow;
        
        private UICanvasPanelWindow mUICanvasPanelWindow;
        
        private UI数据预览Window mUI数据预览Window;
        
        private UI运行日志Window mUI运行日志Window;
        
        private UI控制台Window mUI控制台Window;
        
        private UIMinMaxPictureBoxWindow mUIMinMaxPictureBoxWindow;
        
        private UIUndoButtonWindow mUIUndoButtonWindow;
        
        private UIRedoButtonWindow mUIRedoButtonWindow;
        
        private UINaviViewControlWindow mUINaviViewControlWindow;
        
        private UISaveModelButtonWindow mUISaveModelButtonWindow;
        
        private UIMoveDtControlWindow mUIMoveDtControlWindow;
        
        private UIModelTitleControlWindow mUIModelTitleControlWindow;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UINewModelButtonWindow : WinWindow
    {
        
        public UINewModelButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "newModelButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI新建Button
        {
            get
            {
                if ((this.mUI新建Button == null))
                {
                    this.mUI新建Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI新建Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI新建Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI新建Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIImportButtonWindow : WinWindow
    {
        
        public UIImportButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ImportButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI导入Button
        {
            get
            {
                if ((this.mUI导入Button == null))
                {
                    this.mUI导入Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI导入Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI导入Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI导入Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UISaveAllButtonWindow : WinWindow
    {
        
        public UISaveAllButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "saveAllButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI全部保存Button
        {
            get
            {
                if ((this.mUI全部保存Button == null))
                {
                    this.mUI全部保存Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI全部保存Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI全部保存Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI全部保存Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI关联算子Window : WinWindow
    {
        
        public UI关联算子Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpRelate";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI关联算子Button
        {
            get
            {
                if ((this.mUI关联算子Button == null))
                {
                    this.mUI关联算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI关联算子Button.SearchProperties[WinButton.PropertyNames.Name] = "关联算子";
                    this.mUI关联算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI关联算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI关联算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI碰撞算子Window : WinWindow
    {
        
        public UI碰撞算子Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpCollide";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI碰撞算子Button
        {
            get
            {
                if ((this.mUI碰撞算子Button == null))
                {
                    this.mUI碰撞算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI碰撞算子Button.SearchProperties[WinButton.PropertyNames.Name] = "碰撞算子";
                    this.mUI碰撞算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI碰撞算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI碰撞算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取并集Window : WinWindow
    {
        
        public UI取并集Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lefPanelOpUnion";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI取并集Button
        {
            get
            {
                if ((this.mUI取并集Button == null))
                {
                    this.mUI取并集Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取并集Button.SearchProperties[WinButton.PropertyNames.Name] = "取并集";
                    this.mUI取并集Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI取并集Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取并集Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI条件筛选Window : WinWindow
    {
        
        public UI条件筛选Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpFilter";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI条件筛选Button
        {
            get
            {
                if ((this.mUI条件筛选Button == null))
                {
                    this.mUI条件筛选Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI条件筛选Button.SearchProperties[WinButton.PropertyNames.Name] = "条件筛选";
                    this.mUI条件筛选Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI条件筛选Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI条件筛选Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取最大值Window : WinWindow
    {
        
        public UI取最大值Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpMax";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI取最大值Button
        {
            get
            {
                if ((this.mUI取最大值Button == null))
                {
                    this.mUI取最大值Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取最大值Button.SearchProperties[WinButton.PropertyNames.Name] = "取最大值";
                    this.mUI取最大值Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI取最大值Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取最大值Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取差集Window : WinWindow
    {
        
        public UI取差集Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpDiffer";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI取差集Button
        {
            get
            {
                if ((this.mUI取差集Button == null))
                {
                    this.mUI取差集Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取差集Button.SearchProperties[WinButton.PropertyNames.Name] = "取差集";
                    this.mUI取差集Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI取差集Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取差集Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI随机采样Window : WinWindow
    {
        
        public UI随机采样Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpRandom";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI随机采样Button
        {
            get
            {
                if ((this.mUI随机采样Button == null))
                {
                    this.mUI随机采样Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI随机采样Button.SearchProperties[WinButton.PropertyNames.Name] = "随机采样";
                    this.mUI随机采样Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI随机采样Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI随机采样Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取最小值Window : WinWindow
    {
        
        public UI取最小值Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpMin";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI取最小值Button
        {
            get
            {
                if ((this.mUI取最小值Button == null))
                {
                    this.mUI取最小值Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取最小值Button.SearchProperties[WinButton.PropertyNames.Name] = "取最小值";
                    this.mUI取最小值Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI取最小值Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取最小值Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI取平均值Window : WinWindow
    {
        
        public UI取平均值Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpAvg";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI取平均值Button
        {
            get
            {
                if ((this.mUI取平均值Button == null))
                {
                    this.mUI取平均值Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI取平均值Button.SearchProperties[WinButton.PropertyNames.Name] = "取平均值";
                    this.mUI取平均值Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI取平均值Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取平均值Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI频率算子Window : WinWindow
    {
        
        public UI频率算子Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpFreq";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI频率算子Button
        {
            get
            {
                if ((this.mUI频率算子Button == null))
                {
                    this.mUI频率算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI频率算子Button.SearchProperties[WinButton.PropertyNames.Name] = "频率算子";
                    this.mUI频率算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI频率算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI频率算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI排序算子Window : WinWindow
    {
        
        public UI排序算子Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpSort";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI排序算子Button
        {
            get
            {
                if ((this.mUI排序算子Button == null))
                {
                    this.mUI排序算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI排序算子Button.SearchProperties[WinButton.PropertyNames.Name] = "排序算子";
                    this.mUI排序算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI排序算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI排序算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI分组算子Window : WinWindow
    {
        
        public UI分组算子Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpGroup";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI分组算子Button
        {
            get
            {
                if ((this.mUI分组算子Button == null))
                {
                    this.mUI分组算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI分组算子Button.SearchProperties[WinButton.PropertyNames.Name] = "分组算子";
                    this.mUI分组算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI分组算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI分组算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI关键词过滤Window : WinWindow
    {
        
        public UI关键词过滤Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpWordFilter";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI关键词过滤Button
        {
            get
            {
                if ((this.mUI关键词过滤Button == null))
                {
                    this.mUI关键词过滤Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI关键词过滤Button.SearchProperties[WinButton.PropertyNames.Name] = "关键词过滤";
                    this.mUI关键词过滤Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI关键词过滤Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI关键词过滤Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI数据标准化Window : WinWindow
    {
        
        public UI数据标准化Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftPanelOpDataStandar";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI数据标准化Button
        {
            get
            {
                if ((this.mUI数据标准化Button == null))
                {
                    this.mUI数据标准化Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI数据标准化Button.SearchProperties[WinButton.PropertyNames.Name] = "数据标准化";
                    this.mUI数据标准化Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI数据标准化Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI数据标准化Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI我的模型Window : WinWindow
    {
        
        public UI我的模型Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "myModelButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI我的模型LeftButton
        {
            get
            {
                if ((this.mUI我的模型LeftButton == null))
                {
                    this.mUI我的模型LeftButton = new WinButton(this);
                    #region 搜索条件
                    this.mUI我的模型LeftButton.SearchProperties[WinButton.PropertyNames.Name] = "我的模型";
                    this.mUI我的模型LeftButton.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI我的模型LeftButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI我的模型LeftButton;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI数据Window : WinWindow
    {
        
        public UI数据Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dataButton";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI数据LeftButton
        {
            get
            {
                if ((this.mUI数据LeftButton == null))
                {
                    this.mUI数据LeftButton = new WinButton(this);
                    #region 搜索条件
                    this.mUI数据LeftButton.SearchProperties[WinButton.PropertyNames.Name] = "数据";
                    this.mUI数据LeftButton.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI数据LeftButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI数据LeftButton;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIIAO实验室Window : WinWindow
    {
        
        public UIIAO实验室Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "flowChartButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UIIAO实验室LeftButton
        {
            get
            {
                if ((this.mUIIAO实验室LeftButton == null))
                {
                    this.mUIIAO实验室LeftButton = new WinButton(this);
                    #region 搜索条件
                    this.mUIIAO实验室LeftButton.SearchProperties[WinButton.PropertyNames.Name] = "IAO实验室";
                    this.mUIIAO实验室LeftButton.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIIAO实验室LeftButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIAO实验室LeftButton;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIAI实践Window : WinWindow
    {
        
        public UIAI实践Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "customOPButton1";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UIAI实践Button
        {
            get
            {
                if ((this.mUIAI实践Button == null))
                {
                    this.mUIAI实践Button = new WinButton(this);
                    #region 搜索条件
                    this.mUIAI实践Button.SearchProperties[WinButton.PropertyNames.Name] = "AI实践";
                    this.mUIAI实践Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIAI实践Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAI实践Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI多源算子Window : WinWindow
    {
        
        public UI多源算子Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "customOPButton2";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI多源算子Button
        {
            get
            {
                if ((this.mUI多源算子Button == null))
                {
                    this.mUI多源算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI多源算子Button.SearchProperties[WinButton.PropertyNames.Name] = "多源算子";
                    this.mUI多源算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI多源算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI多源算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIPython算子Window : WinWindow
    {
        
        public UIPython算子Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pythonOPButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UIPython算子Button
        {
            get
            {
                if ((this.mUIPython算子Button == null))
                {
                    this.mUIPython算子Button = new WinButton(this);
                    #region 搜索条件
                    this.mUIPython算子Button.SearchProperties[WinButton.PropertyNames.Name] = "Python算子";
                    this.mUIPython算子Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIPython算子Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPython算子Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIZoomDownPictureBoxWindow : WinWindow
    {
        
        public UIZoomDownPictureBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "zoomDownPictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI缩小Client
        {
            get
            {
                if ((this.mUI缩小Client == null))
                {
                    this.mUI缩小Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI缩小Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI缩小Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI缩小Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIMovePictureBoxWindow : WinWindow
    {
        
        public UIMovePictureBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "movePictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI拖动Client
        {
            get
            {
                if ((this.mUI拖动Client == null))
                {
                    this.mUI拖动Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI拖动Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI拖动Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI拖动Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIZoomUpPictureBoxWindow : WinWindow
    {
        
        public UIZoomUpPictureBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "zoomUpPictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI放大Client
        {
            get
            {
                if ((this.mUI放大Client == null))
                {
                    this.mUI放大Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI放大Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI放大Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI放大Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIRemarkPictureBoxWindow : WinWindow
    {
        
        public UIRemarkPictureBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "remarkPictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI备注Client
        {
            get
            {
                if ((this.mUI备注Client == null))
                {
                    this.mUI备注Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI备注Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI备注Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI备注Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIFramePictureBoxWindow : WinWindow
    {
        
        public UIFramePictureBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "framePictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI框选Client
        {
            get
            {
                if ((this.mUI框选Client == null))
                {
                    this.mUI框选Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI框选Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI框选Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI框选Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIFormatButtonWindow : WinWindow
    {
        
        public UIFormatButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formatButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI一键排版Button
        {
            get
            {
                if ((this.mUI一键排版Button == null))
                {
                    this.mUI一键排版Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI一键排版Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI一键排版Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI一键排版Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIMoreButtonWindow : WinWindow
    {
        
        public UIMoreButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "moreButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI首选项Button
        {
            get
            {
                if ((this.mUI首选项Button == null))
                {
                    this.mUI首选项Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI首选项Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI首选项Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI首选项Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIMoveOpControlWindow : WinWindow
    {
        
        public UIMoveOpControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MoveOpControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UIMoveOpControlClient
        {
            get
            {
                if ((this.mUIMoveOpControlClient == null))
                {
                    this.mUIMoveOpControlClient = new WinClient(this);
                    #region 搜索条件
                    this.mUIMoveOpControlClient.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIMoveOpControlClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIMoveOpControlClient;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UICanvasPanelWindow : WinWindow
    {
        
        public UICanvasPanelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "canvasPanel";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinWindow UIMoveRsControlWindow
        {
            get
            {
                if ((this.mUIMoveRsControlWindow == null))
                {
                    this.mUIMoveRsControlWindow = new WinWindow(this);
                    #region 搜索条件
                    this.mUIMoveRsControlWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIMoveRsControlWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "58";
                    this.mUIMoveRsControlWindow.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIMoveRsControlWindow;
            }
        }
        
        public WinClient UICanvasPanelClient
        {
            get
            {
                if ((this.mUICanvasPanelClient == null))
                {
                    this.mUICanvasPanelClient = new WinClient(this);
                    #region 搜索条件
                    this.mUICanvasPanelClient.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUICanvasPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIMoveRsControlWindow;
        
        private WinClient mUICanvasPanelClient;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI数据预览Window : WinWindow
    {
        
        public UI数据预览Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "previewLabel";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinText UI数据预览Text
        {
            get
            {
                if ((this.mUI数据预览Text == null))
                {
                    this.mUI数据预览Text = new WinText(this);
                    #region 搜索条件
                    this.mUI数据预览Text.SearchProperties[WinText.PropertyNames.Name] = "数据预览";
                    this.mUI数据预览Text.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI数据预览Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUI数据预览Text;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI运行日志Window : WinWindow
    {
        
        public UI运行日志Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "logLabel";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinText UI运行日志Text
        {
            get
            {
                if ((this.mUI运行日志Text == null))
                {
                    this.mUI运行日志Text = new WinText(this);
                    #region 搜索条件
                    this.mUI运行日志Text.SearchProperties[WinText.PropertyNames.Name] = "运行日志";
                    this.mUI运行日志Text.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI运行日志Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUI运行日志Text;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UI控制台Window : WinWindow
    {
        
        public UI控制台Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pyControlLabel";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinText UI控制台Text
        {
            get
            {
                if ((this.mUI控制台Text == null))
                {
                    this.mUI控制台Text = new WinText(this);
                    #region 搜索条件
                    this.mUI控制台Text.SearchProperties[WinText.PropertyNames.Name] = "控制台";
                    this.mUI控制台Text.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI控制台Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUI控制台Text;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIMinMaxPictureBoxWindow : WinWindow
    {
        
        public UIMinMaxPictureBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "minMaxPictureBox";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI隐藏底层面板Client
        {
            get
            {
                if ((this.mUI隐藏底层面板Client == null))
                {
                    this.mUI隐藏底层面板Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI隐藏底层面板Client.SearchProperties[WinControl.PropertyNames.Name] = "运行日志";
                    this.mUI隐藏底层面板Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI隐藏底层面板Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI隐藏底层面板Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIUndoButtonWindow : WinWindow
    {
        
        public UIUndoButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "undoButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI撤销Button
        {
            get
            {
                if ((this.mUI撤销Button == null))
                {
                    this.mUI撤销Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI撤销Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI撤销Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI撤销Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIRedoButtonWindow : WinWindow
    {
        
        public UIRedoButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "redoButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI恢复Button
        {
            get
            {
                if ((this.mUI恢复Button == null))
                {
                    this.mUI恢复Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI恢复Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI恢复Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI恢复Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UINaviViewControlWindow : WinWindow
    {
        
        public UINaviViewControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "naviViewControl";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UI导航窗Client
        {
            get
            {
                if ((this.mUI导航窗Client == null))
                {
                    this.mUI导航窗Client = new WinClient(this);
                    #region 搜索条件
                    this.mUI导航窗Client.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI导航窗Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI导航窗Client;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UISaveModelButtonWindow : WinWindow
    {
        
        public UISaveModelButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "saveModelButton";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinButton UI保存Button
        {
            get
            {
                if ((this.mUI保存Button == null))
                {
                    this.mUI保存Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI保存Button.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUI保存Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI保存Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIMoveDtControlWindow : WinWindow
    {
        
        public UIMoveDtControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MoveDtControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UIMoveDtControlClient
        {
            get
            {
                if ((this.mUIMoveDtControlClient == null))
                {
                    this.mUIMoveDtControlClient = new WinClient(this);
                    #region 搜索条件
                    this.mUIMoveDtControlClient.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIMoveDtControlClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIMoveDtControlClient;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "16.0.29514.35")]
    public class UIModelTitleControlWindow : WinWindow
    {
        
        public UIModelTitleControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ModelTitleControl";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("烽火FiberHome");
            #endregion
        }
        
        #region Properties
        public WinClient UIModelTitleControlClient
        {
            get
            {
                if ((this.mUIModelTitleControlClient == null))
                {
                    this.mUIModelTitleControlClient = new WinClient(this);
                    #region 搜索条件
                    this.mUIModelTitleControlClient.WindowTitles.Add("烽火FiberHome");
                    #endregion
                }
                return this.mUIModelTitleControlClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIModelTitleControlClient;
        #endregion
    }
}
